name: Deployments

on:
  push:
    branches:
      - main

env:
  CI: true

permissions: write-all

jobs:
  create-release-pr:
    name: Create release pr
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Fetch tags
        run: git fetch --tags origin

      - name: Setup bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install

      - name: Create release pr / create tags
        id: changesets
        uses: changesets/action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          version: bun run version-packages
          publish: bun run publish-packages
      - name: Echo outputs
        run: |
          echo "hasChangesets=${{ steps.changesets.outputs.hasChangesets }}"
          echo "publishedPackages=${{ steps.changesets.outputs.publishedPackages }}"
          echo "publishedPackageNames=${{ toJSON(fromJSON(steps.changesets.outputs.publishedPackages).*['name']) }}"
    outputs:
      hasChangesets: ${{ steps.changesets.outputs.hasChangesets }}
      publishedPackages: ${{ steps.changesets.outputs.publishedPackages }}
      publishedPackageNames: ${{ toJSON(fromJSON(steps.changesets.outputs.publishedPackages).*['name']) }}

  build-frontend:
    name: Build frontend
    runs-on: ubuntu-latest
    if:
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: 👀 Read app name
        uses: SebRollen/toml-action@v1.0.2
        id: app_name
        with:
          file: 'apps/frontend/fly.toml'
          field: 'app'

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.9.1

      # Setup cache
      - name: ⚡️ Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: 🔑 Fly Registry Auth
        uses: docker/login-action@v2
        with:
          registry: registry.fly.io
          username: x
          password: ${{ secrets.FLY_API_TOKEN }}

      - name: 🐳 Docker build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: apps/frontend/Dockerfile
          push: true
          tags: registry.fly.io/${{ steps.app_name.outputs.value }}:${{
            github.ref_name }}-${{ github.sha }}
          build-args: |
            BACKEND_URL=${{ secrets.BACKEND_URL }}
            COMMIT_SHA=${{ github.sha }}
            DEEPL_API_KEY=${{ secrets.DEEPL_API_KEY }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            TURBO_TEAM=${{ secrets.TURBO_TEAM }}
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}
            WS_URL=${{ secrets.WS_URL }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      # This ugly bit is necessary if you don't want your cache to grow forever
      # till it hits GitHub's limit of 5GB.
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: 🚚 Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy-frontend:
    name: 🚀 Deploy Frontend
    runs-on: ubuntu-latest
    needs: [create-release-pr, build-frontend]
    steps:
      - name: 🛑 Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0

      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: 👀 Read app name
        uses: SebRollen/toml-action@v1.0.2
        id: app_name
        with:
          file: 'apps/frontend/fly.toml'
          field: 'app'

      - name: 🚀 Deploy Staging
        if: needs.create-release-pr.outputs.hasChangesets == 'true'
        uses: superfly/flyctl-actions@v1.4
        with:
          args:
            'deploy --app ${{ steps.app_name.outputs.value }}-staging --config
            ./apps/frontend/fly.toml --image registry.fly.io/${{
            steps.app_name.outputs.value }}:${{ github.ref_name }}-${{
            github.sha }}'
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: 🚀 Deploy Production
        if: |
          needs.create-release-pr.outputs.hasChangesets == 'false' && (
            contains(needs.create-release-pr.outputs.publishedPackageNames, '@haishin/tsconfig') == true ||
            contains(needs.create-release-pr.outputs.publishedPackageNames, '@haishin/utils') == true ||
            contains(needs.create-release-pr.outputs.publishedPackageNames, '@haishin/frontend') == true
          )
        uses: superfly/flyctl-actions@v1.4
        with:
          args: 'deploy --config ./apps/frontend/fly.toml --image
            registry.fly.io/${{ steps.app_name.outputs.value }}:${{
            github.ref_name }}-${{ github.sha }}'
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  build-backend:
    name: Build backend
    runs-on: ubuntu-latest
    if:
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: 👀 Read app name
        uses: SebRollen/toml-action@v1.0.2
        id: app_name
        with:
          file: 'apps/backend/fly.toml'
          field: 'app'

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.9.1

      # Setup cache
      - name: ⚡️ Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: 🔑 Fly Registry Auth
        uses: docker/login-action@v2
        with:
          registry: registry.fly.io
          username: x
          password: ${{ secrets.FLY_API_TOKEN }}

      - name: 🐳 Docker build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: apps/backend/Dockerfile
          push: true
          tags: registry.fly.io/${{ steps.app_name.outputs.value }}:${{
            github.ref_name }}-${{ github.sha }}
          build-args: |
            COMMIT_SHA=${{ github.sha }}
            TURBO_TEAM=${{ secrets.TURBO_TEAM }}
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      # This ugly bit is necessary if you don't want your cache to grow forever
      # till it hits GitHub's limit of 5GB.
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: 🚚 Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy-backend:
    name: 🚀 Deploy backend
    runs-on: ubuntu-latest
    needs: [create-release-pr, build-backend]
    steps:
      - name: 🛑 Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0

      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: 👀 Read app name
        uses: SebRollen/toml-action@v1.0.2
        id: app_name
        with:
          file: 'apps/backend/fly.toml'
          field: 'app'

      - name: 🚀 Deploy Staging
        if: needs.create-release-pr.outputs.hasChangesets == 'true'
        uses: superfly/flyctl-actions@v1.4
        with:
          args:
            'deploy --app ${{ steps.app_name.outputs.value }}-staging --config
            ./apps/backend/fly.toml --image registry.fly.io/${{
            steps.app_name.outputs.value }}:${{ github.ref_name }}-${{
            github.sha }}'
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: 🚀 Deploy Production
        if: |
          needs.create-release-pr.outputs.hasChangesets == 'false' && (
            contains(needs.create-release-pr.outputs.publishedPackageNames, '@haishin/tsconfig') == true ||
            contains(needs.create-release-pr.outputs.publishedPackageNames, '@haishin/utils') == true ||
            contains(needs.create-release-pr.outputs.publishedPackageNames, '@haishin/backend') == true
          )
        uses: superfly/flyctl-actions@v1.4
        with:
          args: 'deploy --config ./apps/backend/fly.toml --image
            registry.fly.io/${{ steps.app_name.outputs.value }}:${{
            github.ref_name }}-${{ github.sha }}'
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  cleanup-old-release-tags:
    needs: create-release-pr
    name: Cleanup old release tags
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      contents: write
    if: |
      needs.create-release-pr.outputs.hasChangesets == 'false' && needs.create-release-pr.outputs.publishedPackages != '[]'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.create-release-pr.outputs.publishedPackages).*['name'] }}
    steps:
      - name: 'Delete release tags'
        uses: jay2610/delete-older-releases@1.4.0
        with:
          keep_latest: 1
          delete_tags: true
          delete_tag_pattern: ${{ matrix.package }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
