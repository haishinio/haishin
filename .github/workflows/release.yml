name: Release

on:
  push:
    branches:
      - main

env:
  CI: true
  PNPM_CACHE_FOLDER: .pnpm-store
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    name: Release
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Fetch tags
        run: git fetch --tags origin

      - name: Setup node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Install pnpm
        run: npm i pnpm@latest -g

      - name: Setup pnpm config
        run: pnpm config set store-dir $PNPM_CACHE_FOLDER

      - name: Install dependencies
        run: pnpm install

      - name: Create release pr / create tags
        id: changesets
        uses: changesets/action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.HAISHIN_RUNNER_TOKEN }}
        with:
            version: pnpm version-packages
            publish: pnpm publish-packages

      - name: TESTS
        run: |
          echo "hasChangesets=${{ steps.changesets.outputs.hasChangesets }}"
          echo "publishedPackages=${{ steps.changesets.outputs.publishedPackages }}"
          echo "publishedPackageNamesArr=${{ fromJSON(steps.changesets.outputs.publishedPackages).*['name'] }}"
          echo "publishedPackageNamesStr=${{ toJSON(fromJSON(steps.changesets.outputs.publishedPackages).*['name']) }}"
          echo "hasChangesets=${{ steps.changesets.outputs.hasChangesets == 'false' && contains(fromJSON(steps.changesets.outputs.publishedPackages).*['name'], '@haishin/frontend') == 'true' }}"
    outputs:
      hasChangesets: ${{ steps.changesets.outputs.hasChangesets }}
      publishedPackages: ${{ steps.changesets.outputs.publishedPackages }}
      publishedPackageNames: ${{ toJSON(fromJSON(steps.changesets.outputs.publishedPackages).*['name']) }}

  publish-frontend:
    needs: release
    name: Publish frontend
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: |
      needs.release.outputs.hasChangesets == 'false' && (
        contains(fromJSON(needs.release.outputs.publishedPackageNames), '@haishin/tsconfig') == 'true' ||
        contains(fromJSON(needs.release.outputs.publishedPackageNames), '@haishin/transcriber-utils') == 'true' ||
        contains(fromJSON(needs.release.outputs.publishedPackageNames), '@haishin/transcriber') == 'true' ||
        contains(fromJSON(needs.release.outputs.publishedPackageNames), '@haishin/frontend') == 'true'
      )
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend

      - name: Get git revision
        id: git_rev
        run: echo "rev=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: ./apps/frontend/Dockerfile
          build-args: |
            GIT_REVISION=${{ steps.git_rev.outputs.rev }}
            DEEPL_API_KEY=${{ secrets.DEEPL_API_KEY }}
            RTMP_CLIENT_API_URL=${{ secrets.RTMP_CLIENT_API_URL }}
            WS_URL=${{ secrets.WS_URL }}
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}

  publish-backend:
    needs: release
    name: Publish backend
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: |
      needs.release.outputs.hasChangesets == 'false' && (
        contains(fromJSON(needs.release.outputs.publishedPackageNames), '@haishin/tsconfig') == 'true' ||
        contains(fromJSON(needs.release.outputs.publishedPackageNames), '@haishin/transcriber-utils') == 'true' ||
        contains(fromJSON(needs.release.outputs.publishedPackageNames), '@haishin/transcriber') == 'true' ||
        contains(fromJSON(needs.release.outputs.publishedPackageNames), '@haishin/backend') == 'true'
      )
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend

      - name: Get git revision
        id: git_rev
        run: echo "rev=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: ./apps/backend/Dockerfile
          build-args: |
            GIT_REVISION=${{ steps.git_rev.outputs.rev }}
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}